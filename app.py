# app.py
import streamlit as st
import requests
from bs4 import BeautifulSoup
import json
from datetime import datetime
import time

st.set_page_config(
    page_title="Gerador de HQ de Not√≠cias",
    page_icon="üì∞",
    layout="wide"
)

# CSS customizado
st.markdown("""
<style>
    .quadro {
        border: 3px solid #333;
        padding: 15px;
        margin: 10px;
        background: white;
        box-shadow: 5px 5px 10px rgba(0,0,0,0.2);
    }
    .legenda {
        background: #fffacd;
        padding: 10px;
        border-left: 3px solid #ffd700;
        margin-top: 10px;
    }
    .prompt-box {
        background: #f0f0f0;
        padding: 10px;
        border: 1px dashed #999;
        font-size: 12px;
        color: #666;
        margin: 10px 0;
    }
</style>
""", unsafe_allow_html=True)

def extrair_noticia_g1():
    """Extrai primeira not√≠cia do G1"""
    try:
        headers = {'User-Agent': 'Mozilla/5.0'}
        response = requests.get('https://g1.globo.com', headers=headers)
        soup = BeautifulSoup(response.content, 'html.parser')
        
        # Buscar primeira not√≠cia
        noticia = soup.find('a', class_='feed-post-link')
        if noticia:
            return {
                'titulo': noticia.text.strip(),
                'link': noticia.get('href'),
                'fonte': 'G1'
            }
    except:
        return None

def gerar_roteiro_simples(titulo):
    """Gera roteiro sem API (vers√£o demo)"""
    # Simula√ß√£o de gera√ß√£o de roteiro
    quadros = []
    
    # Templates de narrativa baseados no t√≠tulo
    if "tecnologia" in titulo.lower():
        narrativa = [
            "Cientistas fazem descoberta revolucion√°ria em laborat√≥rio",
            "A nova tecnologia promete transformar o cotidiano",
            "Primeiros testes mostram resultados impressionantes",
            "Especialistas debatem os impactos da inova√ß√£o",
            "Empresas j√° demonstram interesse na novidade",
            "O futuro pode estar mais pr√≥ximo do que imaginamos"
        ]
    elif "pol√≠tica" in titulo.lower():
        narrativa = [
            "Autoridades se re√∫nem para importante decis√£o",
            "Discuss√µes intensas marcam o encontro",
            "Propostas s√£o apresentadas e debatidas",
            "Popula√ß√£o acompanha atentamente os desdobramentos",
            "Vota√ß√£o define os rumos da quest√£o",
            "Resultados geram rea√ß√µes diversas na sociedade"
        ]
    else:
        narrativa = [
            "O dia come√ßa com uma not√≠cia surpreendente",
            "Detalhes come√ßam a emergir sobre o acontecimento",
            "Testemunhas relatam o que presenciaram",
            "Autoridades investigam a situa√ß√£o",
            "Especialistas analisam as implica√ß√µes",
            "A hist√≥ria continua a se desenvolver"
        ]
    
    prompts = [
        "Wide establishing shot of the main scene, comic book style, dramatic lighting",
        "Close-up of key elements, detailed illustration, dynamic angle",
        "Action scene showing the main event, energetic composition",
        "Group of people reacting, varied expressions, comic art style",
        "Dramatic moment of revelation, intense atmosphere",
        "Final scene suggesting future implications, hopeful or mysterious tone"
    ]
    
    for i in range(6):
        quadros.append({
            'numero': i + 1,
            'legenda': narrativa[i],
            'prompt': prompts[i]
        })
    
    return quadros

# Interface principal
st.title("üì∞ Gerador de HQ de Not√≠cias")
st.markdown("Transforme not√≠cias em hist√≥rias em quadrinhos!")

# Sidebar com op√ß√µes
with st.sidebar:
    st.header("‚öôÔ∏è Configura√ß√µes")
    
    fonte_noticia = st.selectbox(
        "Fonte da Not√≠cia",
        ["G1 (Autom√°tico)", "URL Personalizada", "Texto Manual"]
    )
    
    if fonte_noticia == "URL Personalizada":
        url_custom = st.text_input("Cole a URL da not√≠cia")
    elif fonte_noticia == "Texto Manual":
        titulo_manual = st.text_input("T√≠tulo da Not√≠cia")
        link_manual = st.text_input("Link (opcional)")
    
    st.markdown("---")
    
    usar_ia = st.checkbox("Usar IA para roteiro (necessita API Key)")
    
    if usar_ia:
        api_key = st.text_input("OpenAI API Key", type="password")

# √Årea principal
col1, col2 = st.columns([1, 2])

with col1:
    st.header("üì• Entrada")
    
    if st.button("üé¨ Gerar HQ", type="primary"):
        with st.spinner("Processando..."):
            
            # Obter not√≠cia
            if fonte_noticia == "G1 (Autom√°tico)":
                noticia = extrair_noticia_g1()
                if noticia:
                    st.success(f"‚úÖ Not√≠cia extra√≠da: {noticia['titulo'][:50]}...")
                else:
                    st.error("‚ùå Erro ao extrair not√≠cia do G1")
                    noticia = {
                        'titulo': 'Exemplo: Nova descoberta cient√≠fica surpreende pesquisadores',
                        'link': '#',
                        'fonte': 'Demo'
                    }
            elif fonte_noticia == "Texto Manual":
                noticia = {
                    'titulo': titulo_manual,
                    'link': link_manual or '#',
                    'fonte': 'Manual'
                }
            
            # Gerar roteiro
            time.sleep(1)  # Simular processamento
            
            if usar_ia and api_key:
                st.info("ü§ñ Gerando roteiro com IA...")
                # Aqui voc√™ implementaria a chamada real √† API
                quadros = gerar_roteiro_simples(noticia['titulo'])
            else:
                quadros = gerar_roteiro_simples(noticia['titulo'])
            
            # Salvar no session state
            st.session_state['noticia'] = noticia
            st.session_state['quadros'] = quadros
            st.session_state['titulo_hq'] = f"üìö {noticia['titulo'][:50]}..."

with col2:
    st.header("üé® Hist√≥ria em Quadrinhos")
    
    if 'quadros' in st.session_state:
        st.subheader(st.session_state['titulo_hq'])
        
        # Exibir quadros em grade 2x3
        for row in range(3):
            cols = st.columns(2)
            for col in range(2):
                idx = row * 2 + col
                if idx < 6:
                    with cols[col]:
                        quadro = st.session_state['quadros'][idx]
                        
                        st.markdown(f"""
                        <div class="quadro">
                            <h4>Quadro {quadro['numero']}</h4>
                            <div class="prompt-box">
                                <b>Prompt para imagem:</b><br>
                                {quadro['prompt']}
                            </div>
                            <div class="legenda">
                                {quadro['legenda']}
                            </div>
                        </div>
                        """, unsafe_allow_html=True)
        
        # Informa√ß√µes da fonte
        st.markdown("---")
        st.info(f"""
        **üìå Fonte:** {st.session_state['noticia']['fonte']}  
        **üîó Link:** {st.session_state['noticia']['link']}  
        **üìÖ Gerado em:** {datetime.now().strftime("%d/%m/%Y %H:%M")}
        """)
        
        # Bot√£o para baixar
        if st.button("üíæ Baixar HTML"):
            # Gerar HTML para download
            html_content = gerar_html_completo(
                st.session_state['titulo_hq'],
                st.session_state['quadros'],
                st.session_state['noticia']
            )
            st.download_button(
                label="üì• Clique para baixar",
                data=html_content,
                file_name="hq_noticia.html",
                mime="text/html"
            )

def gerar_html_completo(titulo, quadros, noticia):
    """Gera HTML completo da HQ"""
    html = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>{titulo}</title>
        <style>
            body {{ font-family: Arial, sans-serif; max-width: 1200px; margin: 0 auto; padding: 20px; }}
            .grid {{ display: grid; grid-template-columns: repeat(2, 1fr); gap: 20px; }}
            .quadro {{ border: 3px solid #333; padding: 15px; background: white; }}
            .legenda {{ background: #fffacd; padding: 10px; margin-top: 10px; }}
            .prompt {{ background: #f0f0f0; padding: 10px; font-size: 12px; color: #666; }}
        </style>
    </head>
    <body>
        <h1>{titulo}</h1>
        <div class="grid">
    """
    
    for quadro in quadros:
        html += f"""
            <div class="quadro">
                <h3>Quadro {quadro['numero']}</h3>
                <div class="prompt">{quadro['prompt']}</div>
                <div class="legenda">{quadro['legenda']}</div>
            </div>
        """
    
    html += f"""
        </div>
        <hr>
        <p>Fonte: {noticia['fonte']} - <a href="{noticia['link']}">{noticia['link']}</a></p>
    </body>
    </html>
    """
    
    return html

# Rodap√©
st.markdown("---")
st.markdown("Feito com ‚ù§Ô∏è usando Streamlit")
